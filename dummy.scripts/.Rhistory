for(i in ((nrow(qmat)/2)+1):nrow(qmat)){
if(i < nrow(qmat)){
qmat[i, i+1] <- 1 # fissions
qmat[i+1, i] <- 2 # fusions
}
}
View(qmat)
for(i in 2:(nrow(qmat)/2)){
qmat[i,(nrow(qmat)/2) + i -1] <- 3
}
View(qmat)
maxChroms <- 15
maxChroms <- maxChroms + 2
nChroms <- (maxChroms - 1) * 2
# make the initial q matrix
qmat <- matrix(data = 0,
nrow = nChroms,
ncol = nChroms)
# define rownames and colnames
# although row names and col names starts from 1, chromsome counts starts from
# 2
View(qmat)
2:maxChroms
paste(2:maxChroms,"XO")
paste(2:maxChroms,"XO",sep="")
# define rownames and colnames
# although row names and col names starts from 1, chromsome counts starts from
# 2
row.names(qmat)  <- colnames(qmat) <- c(paste(2:maxChroms,"XO",sep=""),
paste(2:maxChroms,"XY",sep=""))
View(qmat)
# autosomal fissions and fusions in XO systems
for(i in 1){
while (i < (nrow(qmat)/2)) {
qmat[i, i+1] <- 1 # fissions
qmat[i+1, i] <- 2 # fusions
i <- i + 1
}
}
# autosomal fissions and fusions in XY systems
for(i in ((nrow(qmat)/2)+1):nrow(qmat)){
if(i < nrow(qmat)){
qmat[i, i+1] <- 1 # fissions
qmat[i+1, i] <- 2 # fusions
}
}
# sex chromosome autosome fusion
for(i in 2:(nrow(qmat)/2)){
qmat[i,(nrow(qmat)/2) + i -1] <- 3
}
# Y chromosome loss
for(i in ((nrow(qmat)/2)+1):nrow(qmat)){
qmat[i, i-(nrow(qmat)/2)] <- 4
}
View(qmat)
qmatGen(maxChroms = 4)
# Terrence Sylvester
# 26th March 2020
# pradakshanas@gmail.com
# make transision matrix
# make a matrix with 100 chromosomes on each state. Here we will be using
# sex chromosome systems as the states. These states are XO and XY.
# we will go from 2:100 chromosomes. So we will have a total of 198 rows and cols
qmatGen <- function(maxChroms = NULL){
# define total number of chromosome states
#maxChroms <- 15
maxChroms <- maxChroms + 2
nChroms <- (maxChroms - 1) * 2
# make the initial q matrix
qmat <- matrix(data = 0,
nrow = nChroms,
ncol = nChroms)
# define rownames and colnames
# although row names and col names starts from 1, chromsome counts starts from
# 2
row.names(qmat)  <- colnames(qmat) <- c(paste(2:maxChroms,"XO",sep=""),
paste(2:maxChroms,"XY",sep=""))
# following are the rate parameters that we define
# rate1 <- autosomal fusions in XO and XY sex chromosome sytems
# rate2 <- autosomal fissions in XO anf XY sex chromosome systems
# rate3 <- sex chromosome autosome fusions
# rate4 <- Y chromosome loss
# autosomal fissions and fusions in XO systems
for(i in 1){
while (i < (nrow(qmat)/2)) {
qmat[i, i+1] <- 1 # fissions
qmat[i+1, i] <- 2 # fusions
i <- i + 1
}
}
# autosomal fissions and fusions in XY systems
for(i in ((nrow(qmat)/2)+1):nrow(qmat)){
if(i < nrow(qmat)){
qmat[i, i+1] <- 1 # fissions
qmat[i+1, i] <- 2 # fusions
}
}
# sex chromosome autosome fusion
for(i in 2:(nrow(qmat)/2)){
qmat[i,(nrow(qmat)/2) + i -1] <- 3
}
# Y chromosome loss
for(i in ((nrow(qmat)/2)+1):nrow(qmat)){
qmat[i, i-(nrow(qmat)/2)] <- 4
}
# # put rate parameter for y chromosome capture - rate15
# for(i in 1:(nrow(qmat)/2)){
#   qmat[i, (nrow(qmat)/2) + i] <- 15
# }
return(qmat)}
qmatGen(maxChroms = 4)
library(phytools)
library(evobiR)
setwd("~/Desktop/Dropbox/gitrepos/pfsa/dummy.scripts")
# helper functions
source("pfsa.qmat.builder.R")
# make a random tree
#set.seed(1)
tree <- rcoal(n = 3,
br = runif(n = 2))
plot(tree)
plot(tree)
# make thre tree unit length
tree$edge.length <- tree$edge.length / max(branching.times(tree))
# make a data table with four columns
# col 1 - species names
# col 2 - chromosome number (haploid)
# col 3 - sex chromosome system state 0 - XO, 1 - XY
# col 4 - position of the q matrix
dat <- matrix(data = NA,
nrow = length(tree$tip.label),
ncol = 4)
# lable columns
colnames(dat) <- c("species", "chroms", "scs", "qmatState")
# make a data table with four columns
# col 1 - species names
# col 2 - chromosome number (haploid)
# col 3 - sex chromosome system state 0 - XO, 1 - XY
# col 4 - position of the q matrix
dat <- as.data.frame(matrix(data = NA,
nrow = length(tree$tip.label),
ncol = 4))
# lable columns
colnames(dat) <- c("species", "chroms", "scs", "qmatState")
View(dat)
# make a data table with four columns
# col 1 - species names
# col 2 - chromosome number (haploid)
# col 3 - sex chromosome system state 0 - XO, 1 - XY
# col 4 - position of the q matrix
dat <- as.data.frame(matrix(data = NA,
nrow = length(tree$tip.label),
ncol = 3))
# lable columns
colnames(dat) <- c("species", "chroms", "scs")
# fill the data frame
dat$species <- tree$tip.label
dat$chroms <- c(10,9,11)
dat$scs <- c("XY","XO","XY")
View(dat)
# fill the data frame
dat$species <- tree$tip.label
dat$chroms <- c(10,9,11)
dat$scs <- c("XY","XO","XY")
# haploid autosome count
maxChromValue <- max(dat$chroms)
maxChroms <- 15
maxChroms <- chrom.range[2] + 1
minChroms <- chrom.range[1] - 1
nChroms <- (maxChroms - 1) * 2
# make the initial q matrix
qmat <- matrix(data = 0,
nrow = nChroms,
ncol = nChroms)
# define rownames and colnames
# although row names and col names starts from 1, chromsome counts starts from
# 2
row.names(qmat)  <- colnames(qmat) <- c(paste(2:maxChroms,"XO",sep=""),
paste(2:maxChroms,"XY",sep=""))
# following are the rate parameters that we define
# rate1 <- autosomal fusions in XO and XY sex chromosome sytems
# rate2 <- autosomal fissions in XO anf XY sex chromosome systems
# rate3 <- sex chromosome autosome fusions
# rate4 <- Y chromosome loss
# autosomal fissions and fusions in XO systems
for(i in 1){
while (i < (nrow(qmat)/2)) {
qmat[i, i+1] <- 1 # fissions
qmat[i+1, i] <- 2 # fusions
i <- i + 1
}
}
# autosomal fissions and fusions in XY systems
for(i in ((nrow(qmat)/2)+1):nrow(qmat)){
if(i < nrow(qmat)){
qmat[i, i+1] <- 1 # fissions
qmat[i+1, i] <- 2 # fusions
}
}
# sex chromosome autosome fusion
for(i in 2:(nrow(qmat)/2)){
qmat[i,(nrow(qmat)/2) + i -1] <- 3
}
# Y chromosome loss
for(i in ((nrow(qmat)/2)+1):nrow(qmat)){
qmat[i, i-(nrow(qmat)/2)] <- 4
}
View(qmat)
# define total number of chromosome states
chrom.range <- c(10, 19)
maxChroms <- chrom.range[2] + 1
minChroms <- chrom.range[1] - 1
nChroms <- (maxChroms - 1) * 2
# make the initial q matrix
qmat <- matrix(data = 0,
nrow = nChroms,
ncol = nChroms)
# define rownames and colnames
# although row names and col names starts from 1, chromsome counts starts from
# 2
row.names(qmat)  <- colnames(qmat) <- c(paste(2:maxChroms,"XO",sep=""),
paste(2:maxChroms,"XY",sep=""))
# following are the rate parameters that we define
# rate1 <- autosomal fusions in XO and XY sex chromosome sytems
# rate2 <- autosomal fissions in XO anf XY sex chromosome systems
# rate3 <- sex chromosome autosome fusions
# rate4 <- Y chromosome loss
# autosomal fissions and fusions in XO systems
for(i in 1){
while (i < (nrow(qmat)/2)) {
qmat[i, i+1] <- 1 # fissions
qmat[i+1, i] <- 2 # fusions
i <- i + 1
}
}
# autosomal fissions and fusions in XY systems
for(i in ((nrow(qmat)/2)+1):nrow(qmat)){
if(i < nrow(qmat)){
qmat[i, i+1] <- 1 # fissions
qmat[i+1, i] <- 2 # fusions
}
}
# sex chromosome autosome fusion
for(i in 2:(nrow(qmat)/2)){
qmat[i,(nrow(qmat)/2) + i -1] <- 3
}
# Y chromosome loss
for(i in ((nrow(qmat)/2)+1):nrow(qmat)){
qmat[i, i-(nrow(qmat)/2)] <- 4
}
View(qmat)
View(qmat)
minChroms-2
View(qmat)
ncol(qmat)
ncol(qmat)/2
colnames(qmat)
minChroms-2
(ncol(qmat)/2 + 1)
1:minChroms-2
(ncol(qmat)/2 + 1):(minChroms-2+1)
1:(minChroms-2)
(minChroms-2+1)
(ncol(qmat)/2 + minChroms-2+1)
(ncol(qmat)/2 + 1):(ncol(qmat)/2 + minChroms-2+1)
(ncol(qmat)/2 + 1):((ncol(qmat)/2 + 1) + minChroms-2+1)
(ncol(qmat)/2 + 1)
colnames(qmat)
((ncol(qmat)/2 + 1) + minChroms-2)
hp <- ncol(qmat)/2 + 1
1:(minChroms-2)
hp:(hp + minChroms-2)
hp:(hp + minChroms-3)
c(1:(minChroms-2), hp:(hp + minChroms-3))
qmat <- qmat[-drops, -drops]
hp <- ncol(qmat)/2 + 1
drops <- c(1:(minChroms-2), hp:(hp + minChroms-3))
qmat <- qmat[-drops, -drops]
View(qmat)
qmatGen <- function(chrom.range = NULL){
# define total number of chromosome states
#chrom.range <- c(10, 19)
maxChroms <- chrom.range[2] + 1
minChroms <- chrom.range[1] - 1
nChroms <- (maxChroms - 1) * 2
# make the initial q matrix
qmat <- matrix(data = 0,
nrow = nChroms,
ncol = nChroms)
# define rownames and colnames
# although row names and col names starts from 1, chromsome counts starts from
# 2
row.names(qmat)  <- colnames(qmat) <- c(paste(2:maxChroms,"XO",sep=""),
paste(2:maxChroms,"XY",sep=""))
# following are the rate parameters that we define
# rate1 <- autosomal fusions in XO and XY sex chromosome sytems
# rate2 <- autosomal fissions in XO anf XY sex chromosome systems
# rate3 <- sex chromosome autosome fusions
# rate4 <- Y chromosome loss
# autosomal fissions and fusions in XO systems
for(i in 1){
while (i < (nrow(qmat)/2)) {
qmat[i, i+1] <- 1 # fissions
qmat[i+1, i] <- 2 # fusions
i <- i + 1
}
}
# autosomal fissions and fusions in XY systems
for(i in ((nrow(qmat)/2)+1):nrow(qmat)){
if(i < nrow(qmat)){
qmat[i, i+1] <- 1 # fissions
qmat[i+1, i] <- 2 # fusions
}
}
# sex chromosome autosome fusion
for(i in 2:(nrow(qmat)/2)){
qmat[i,(nrow(qmat)/2) + i -1] <- 3
}
# Y chromosome loss
for(i in ((nrow(qmat)/2)+1):nrow(qmat)){
qmat[i, i-(nrow(qmat)/2)] <- 4
}
if(chrom.range[1] > 2){
}
hp <- ncol(qmat)/2 + 1
drops <- c(1:(minChroms-2), hp:(hp + minChroms-3))
qmat <- qmat[-drops, -drops]
return(qmat)
}
qmatGen(chrom.range = c(5,9))
library(phytools)
library(evobiR)
# helper functions
source("functions.R")
# make a random tree
#set.seed(1)
tree <- rcoal(n = 3,
br = runif(n = 2))
# make thre tree unit length
tree$edge.length <- tree$edge.length / max(branching.times(tree))
# make a data table with four columns
# col 1 - species names
# col 2 - chromosome number (haploid)
# col 3 - sex chromosome system state 0 - XO, 1 - XY
# col 4 - position of the q matrix
dat <- as.data.frame(matrix(data = NA,
nrow = length(tree$tip.label),
ncol = 3))
# lable columns
colnames(dat) <- c("species", "chroms", "scs")
# fill the data frame
dat$species <- tree$tip.label
dat$chroms <- c(10,9,11)
dat$scs <- c("XY","XO","XY")
chrom.range <- range(dat$chroms)
maxChroms <- chrom.range[2] + 1
minChroms <- chrom.range[1] - 1
nChroms <- (maxChroms - 1) * 2
# make the initial q matrix
qmat <- matrix(data = 0,
nrow = nChroms,
ncol = nChroms)
# define rownames and colnames
# although row names and col names starts from 1, chromsome counts starts from
# 2
row.names(qmat)  <- colnames(qmat) <- c(paste(2:maxChroms,"XO",sep=""),
paste(2:maxChroms,"XY",sep=""))
View(qmat)
pmat <- qmat[NULL,]
View(pmat)
load("/Users/hblackmon/Desktop/nathans.profiling.RData")
prof.result
View(prof.result)
prof.result
View(prof.result)
View(prof.result)
library(profvis)
View(prof.result)
library(ape)
help(plot)
help("plot.phylo")
print(prof.result)
sample(c("H","T"), times, replace = T)
# heads proportion
# flipped 15
times <- 15
dat <- .7
sample(c("H","T"), times, replace = T)
sample(c("H","T"), times, replace = T) == "H"
sum(sample(c("H","T"), times, replace = T) == "H")
sum(sample(c("H","T"), times, replace = T) == "H")/times
null.dist <- c()
for(i in 1:1000){
null.dist <- sum(sample(c("H","T"),
times,
replace = T) == "H") / times
}
# heads proportion
# flipped 15
times <- 15
dat <- .7
null.dist <- c()
for(i in 1:1000){
null.dist[i] <- sum(sample(c("H","T"),
times,
replace = T) == "H") / times
}
plot(density(null.dist))
# heads proportion
# flipped 15
times <- 150
dat <- .7
null.dist <- c()
for(i in 1:1000){
null.dist[i] <- sum(sample(c("H","T"),
times,
replace = T) == "H") / times
}
plot(density(null.dist))
# heads proportion
# flipped 15
times <- 1500
dat <- .7
null.dist <- c()
for(i in 1:1000){
null.dist[i] <- sum(sample(c("H","T"),
times,
replace = T) == "H") / times
}
plot(density(null.dist))
# heads proportion
# flipped 15
times <- 1500000
dat <- .7
null.dist <- c()
for(i in 1:1000){
null.dist[i] <- sum(sample(c("H","T"),
times,
replace = T) == "H") / times
}
plot(density(null.dist))
# heads proportion
# flipped 15
times <- 150000
dat <- .7
null.dist <- c()
for(i in 1:1000){
null.dist[i] <- sum(sample(c("H","T"),
times,
replace = T) == "H") / times
}
plot(density(null.dist))
# heads proportion
# flipped 15
times <- 15
dat <- .7
null.dist <- c()
for(i in 1:1000){
null.dist[i] <- sum(sample(c("H","T"),
times,
replace = T) == "H") / times
}
plot(density(null.dist))
abline(v=dat)
times <- 15
dat <- .7
null.dist <- c()
for(i in 1:10){
null.dist[i] <- sum(sample(c("H","T"),
times,
replace = T) == "H") / times
}
plot(density(null.dist))
abline(v=dat)
hist(null.dist)
# flipped 15
times <- 15
dat <- .7
null.dist <- c()
for(i in 1:100){
null.dist[i] <- sum(sample(c("H","T"),
times,
replace = T) == "H") / times
}
hist(null.dist)
abline(v=dat)
# heads proportion
# flipped 15
times <- 15
dat <- .7
null.dist <- c()
for(i in 1:1000){
null.dist[i] <- sum(sample(c("H","T"),
times,
replace = T) == "H") / times
}
hist(null.dist)
abline(v=dat)
plot(density(null.dist))
abline(v=dat)
sum(null.dist >= dat)
sum(null.dist >= dat)/1000
dat <- .75
sum(null.dist >= dat)/1000
dat <- .73
sum(null.dist >= dat)/1000
dat <- .74
sum(null.dist >= dat)/1000
pval1 <- sum(null.dist >= dat)/1000
plot(density(null.dist-.5))
plot(density(abs(null.dist-.5)))
sum(abs(null.dist-.5) >= .24)/1000
