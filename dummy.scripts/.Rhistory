library(phytools)
library(chromePlus)
library(geiger)
library(diversitree)
library(viridis)
# helper functions
source("pfsa.qmat.builder.R")
# make a random tree
#set.seed(1)
tree <- rcoal(n = 3,
br = runif(n = 20))
# plot the tree without tip lables
plot(tree, show.tip.label = F)
# make thre tree unit length
tree$edge.length <- tree$edge.length / max(branching.times(tree))
# make a data table with four columns
# col 1 - species names
# col 2 - chromosome number (haploid)
# col 3 - sex chromosome system state 0 - XO, 1 - XY
# col 4 - position of the q matrix
dat <- matrix(data = NA,
nrow = length(tree$tip.label),
ncol = 4)
# lable columns
colnames(dat) <- c("species", "chroms", "scs", "qmatState")
# convert to data frame for easy operations
dat <- as.data.frame(dat)
# fill the data frame
dat$species <- tree$tip.label
dat$chroms <- c(10,9,11)
dat$scs <- c(1,1,0)
# number of chromosomes
maxChroms <- 15
nChroms <- (maxChroms - 1) * 2
# get the max chrom number at XO state
nChromsXO <- length(dat$chroms[dat$scs==1])
# fill in the states of the qmat
# XO
dat$qmatState[dat$scs==0] <- dat$chroms[dat$scs==0] - 1
#XY
dat$qmatState[dat$scs==1] <- dat$chroms[dat$scs==1] - 1 + (nChroms/2)
# get the range of chromosome number at each sex chromosome state
rngXO <- range(dat$qmatState[dat$scs == 0])
rngXY <- range(dat$qmatState[dat$scs == 1])
# define the miargin
# this is basically by how much you change the min and max chromosome number
margin <- 1
# get the full range of chromosome numbers icluding all sex chromosome systems
rng <- c(c((rngXO[1] - margin):(rngXO[2] + margin)),
c((rngXY[1] - margin):(rngXY[2] + margin)))
# get the probability matrix
probMat <- matrix(data = 0,
nrow = length(dat$species),
ncol = length(rng))
colnames(probMat) <- rng
rownames(probMat) <- dat$species
# assign tip probabilities
for(i in 1:nrow(dat)){
probMat[i, which(colnames(probMat) == dat$qmatState[i])] <- 1
}
# get the named tip states
tip.states <- dat$qmatState
names(tip.states) <- dat$species
# plot tipl tables
tip.labs <- paste(dat$chroms, c("XO","XY")[dat$scs + 1])
tiplabels(tip.labs,
frame = "n",
offset = .02,
cex = .7)
# make the qmatrix
qmat <- qmatGen(maxChroms)
# get the subset of qmatrix
qmat.new <- qmat[rng, rng]
# stochastic mapping
map <- make.simmap(tree = tree,
x = probMat,
model = qmat.new,
pi = c(0,1,rep(0,5)),
nsim = 100)
# get the number of transisions
simmapSummary <- describe.simmap(map)
# plot the simmap
plotSimmap(map)
simmapSummary
simmapSummary$count
simmapSummary
simmapSummary
simmapSummary
# plot the simmap
plotSimmap(map)
map[1]
map[[1]]$edge
map[[1]]$Q
map[[1]]$mapped.edge
map[[1]]$maps
map[[1]]$maps[[1]]
names(map[[1]]$maps[[1]])
names(map[[1]]$maps[[4]])
View(qmat)
View(qmat.new)
View(qmat.new)
simmapSummary$count
