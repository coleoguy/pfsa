install.packages("tidyverse")
install.packages("tidyverse", lib="C:/Program Files/R/R-4.0.0/library")
install.packages("tidyverse")
install.packages("backports")
install.packages("tidyverse")
library(ggpubr)
setwd("C:/Users/Terrence Sylvester/Documents/GitHub/pfsa/dummy.scripts/analysis/rscripts")
# Terrence Sylvester
# 27 October 2020
# pradakshanas@gmail.com
# load libraries
library(phytools)
library(chromePlus)
library(evobiR)
library(coda)
library(diversitree)
library(viridis)
# load helper functions
source("helper.functions.R")
# defininf the number of simulations that will be performed
nsim <- 100
# get data
dat <- GetData(trees = "../data/Trees/posterior.trees.nex",
data = "../data/chrom.data/chroms.csv")
# read in trees
trees <- read.nexus("../data/Trees/posterior.trees.nex")
# lets try this to orthoptera
dat <- dat[dat$order == "Orthoptera",]
# rename some of the scs for clarity'=
dat$SCS[dat$notes == "X1X1X2X2/X1X2Y1"] <- "XXY"
dat$SCS[dat$notes == "X1X1/X1Y1Y2"] <- "XYY"
dat$SCS[dat$notes == "X1X1X2X2/X1X2Y"] <- "XXY"
dat$SCS[dat$SCS == "XY|homomorphic"] <- "XY"
# isolate those data that we need
dat <- dat[dat$SCS %in% c("XO", "XY", "XYY", "XXY"),]
# remove species that have no chromosome number data
dat <- dat[!(is.na(dat$haploid)),]
# keep these tips only
phy <- vector(mode = "list", length = length(trees))
for(i in 1:100){
phy[[i]] <- keep.tip(trees[[i]], dat$species)
}
class(phy) <- "multiPhylo"
# tree <- keep.tip(trees[[1]], dat$species)
# make a data table to hold the species names, chromosome number and
# sex chromosome system
# tree <- keep.tip(trees[[1]], dat$species)
# make a data table to hold the species names, chromosome number and
# sex chromosome system
dat.new <-  as.data.frame(matrix(data=NA, nrow = Ntip(phy[[1]]), ncol = 3))
colnames(dat.new) <- c("SpeciesName", "chroms", "scs")
# fill in the data table
dat.new$SpeciesName <- dat$species
dat.new$chroms <- dat$haploid
dat.new$scs <- dat$SCS
# now we get the qmatrix and pmatrix
inputs <- get.matrixes.v2(haploid.scs = T,
autosome.as.input = T,
Neo.sex = F,
complex = T,
chrom.range.expansion = 0,
dat = dat.new,
trees = phy,
def.rates = list(r1 = 1,    # AA fusion  XO
r2 = 2,    # AA fission XO
r3 = 1,    # AA fusion  XY
r4 = 2,    # AA fission XY
r5 = 1,    # AA fusion  Neo.XY
r6 = 2,    # AA fission Neo.XY
r7 = 1,    # AA fusion  XXY
r8 = 2,    # AA fission XXY
r9 = 1,    # AA fusion  XYY
r10 = 2,  # AA fission XYY
r11 = 11,  # SA fusion  XO -> XY
r12 = 11,  # SA fusion  XY -> Neo.XY
r13 = 11,  # SA fusion  XY -> XXY
r14 = 11,  # SA fusion  XY -> XYY
r15 = 15,  # transision Neo.XY -> XY
r16 = 0,  # X fission  XY -> XXY
r17 = 0,  # Y fission  XY -> XYY
r18 = 18,  # Y loss     XY -> XO
r19 = 19,  # Y loss     XYY -> XY
r20 = 20,  # X fusion   XXY -> XY
r21 = 21,  # Y capture  XO -> XY
r22 = 22,  # polyploidy XO
r23 = 23,  # polyploidy XY
r24 = 24,  # polyploidy Neo.XY
r25 = 25,  # polyploidy XXY
r26 = 26)) # polyploidy XYY)
# now we get the qmatrix and pmatrix
inputs <- get.matrixes.v2(haploid.scs = T,
autosome.as.input = T,
Neo.sex = F,
complex = T,
chrom.range.expansion = 0,
dat = dat.new,
trees = phy,
def.rates = list(r01 = 1,    # AA fusion  XO
r02 = 2,    # AA fission XO
r03 = 1,    # AA fusion  XY
r04 = 2,    # AA fission XY
r05 = 1,    # AA fusion  Neo.XY
r06 = 2,    # AA fission Neo.XY
r07 = 1,    # AA fusion  XXY
r08 = 2,    # AA fission XXY
r09 = 1,    # AA fusion  XYY
r10 = 2,  # AA fission XYY
r11 = 11,  # SA fusion  XO -> XY
r12 = 11,  # SA fusion  XY -> Neo.XY
r13 = 11,  # SA fusion  XY -> XXY
r14 = 11,  # SA fusion  XY -> XYY
r15 = 15,  # transision Neo.XY -> XY
r16 = 0,  # X fission  XY -> XXY
r17 = 0,  # Y fission  XY -> XYY
r18 = 18,  # Y loss     XY -> XO
r19 = 19,  # Y loss     XYY -> XY
r20 = 20,  # X fusion   XXY -> XY
r21 = 21,  # Y capture  XO -> XY
r22 = 22,  # polyploidy XO
r23 = 23,  # polyploidy XY
r24 = 24,  # polyploidy Neo.XY
r25 = 25,  # polyploidy XXY
r26 = 26)) # polyploidy XYY)
# get the relavent inputs
qmat <- inputs$qmat
pmat <- inputs$pmat
# trees <- inputs$trees
states <- inputs$states
karyotypes <- inputs$karyotypes
#plot tree and states
plot(phy[[1]], show.tip.label = F)
tiplabels(col = c("red", "blue")[as.factor(inputs$dat$scs)], pch = 16, offset = 1)
tiplabels(col = c("red", "blue", "green", "yellow")[as.factor(inputs$dat$scs)], pch = 16, offset = 1)
tiplabels(col = c("red", "blue", "green", "yellow")[as.factor(inputs$dat$scs)], pch = 16, offset = .7)
#plot tree and states
plot(phy[[1]], show.tip.label = F)
tiplabels(col = c("red", "blue", "green", "yellow")[as.factor(inputs$dat$scs)], pch = 16, offset = .7)
tiplabels(inputs$dat$chroms, offset = 1.5, cex = .7)
#plot tree and states
plot(phy[[1]], show.tip.label = F)
tiplabels(col = c("red", "blue", "green", "yellow")[as.factor(inputs$dat$scs)], pch = 16, offset = .7)
tiplabels(inputs$dat$chroms, offset = 1.5, cex = .7, frame = "none")
# perform stochastic mappings
colnames(pmat)
# perform stochastic mappings
colnames(pmat) == "12XO"
# perform stochastic mappings
(colnames(pmat) == "12XO") + 1
# perform stochastic mappings
c(0,1)[(colnames(pmat) == "12XO") + 1]
# perform stochastic mappings
pi <- c(0,1)[(colnames(pmat) == "12XO") + 1]
x <- Sys.time()
hists <- make.simmap(tree = phy,
x = pmat,
model = qmat,
nsim = nsim,
pi = pi)
Sys.time() - x
hists
