# for XY / ZW
if(gsub(pattern = "[0-9]",x= karyotypes[i], replacement = "") %in% c("XY", "ZW")){
pfSA.tab$state[i] <- karyotypes[i]
pfSA.tab$pfsa[i] <- Pfsa(Da = as.numeric(gsub(pattern = "[A-z]",
x= karyotypes[i] ,
replacement = "") * 2 - 2),
scs = "XY")
}
# for Neo.XY / Neo.ZW
if(gsub(pattern = "[0-9]",x= karyotypes[i], replacement = "") %in% c("Neo.XY", "Neo.ZW")){
pfSA.tab$state[i] <- karyotypes[i]
pfSA.tab$pfsa[i] <- Pfsa(Da = as.numeric(gsub(pattern = "[A-z]",
x= karyotypes[i] ,
replacement = "") * 2 - 2),
scs = "XY")
}
# for XXY / ZZW
if(gsub(pattern = "[0-9]",x= karyotypes[i], replacement = "") %in% c("XXY","ZZW")){
pfSA.tab$state[i] <- karyotypes[i]
pfSA.tab$pfsa[i] <- Pfsa(Da = as.numeric(gsub(pattern = "[A-z./]",
x= karyotypes[i] ,
replacement = "")),
scs = "XXY")
}
# for XYY / ZWW
if(gsub(pattern = "[0-9]",x= karyotypes[i], replacement = "") %in% c("XYY", "ZWW")){
pfSA.tab$state[i] <- karyotypes[i]
pfSA.tab$pfsa[i] <- Pfsa(Da = as.numeric(gsub(pattern = "[A-z./]",
x= karyotypes[i] ,
replacement = "")),
scs = "XYY")
}
}
as.numeric(gsub(pattern = "[A-z]",
x= karyotypes[i] ,
replacement = "")) * 2 - 2
karyotypes
karyotypes[i]
# now we get the expected pfsa
# make a table to hold the pfsa given scs and chrom number
pfSA.tab <- as.data.frame(matrix(data = NA, nrow = length(karyotypes), ncol = 2))
colnames(pfSA.tab) <- c("state", "pfsa")
pfSA.tab <- pfSA.tab[-9,]
for(i in 1:length(karyotypes)){
# for XO / ZO
if(gsub(pattern = "[0-9]",x= karyotypes[i], replacement = "") %in% c("XO", "ZO")){
pfSA.tab$state[i] <- karyotypes[i]
pfSA.tab$pfsa[i] <- Pfsa(Da = as.numeric(gsub(pattern = "[A-z]",
x= karyotypes[i] ,
replacement = "")),
scs = "XO")
}
# for XY / ZW
if(gsub(pattern = "[0-9]",x= karyotypes[i], replacement = "") %in% c("XY", "ZW")){
pfSA.tab$state[i] <- karyotypes[i]
pfSA.tab$pfsa[i] <- Pfsa(Da = as.numeric(gsub(pattern = "[A-z]",
x= karyotypes[i] ,
replacement = "")) * 2 - 2,
scs = "XY")
}
# for Neo.XY / Neo.ZW
if(gsub(pattern = "[0-9]",x= karyotypes[i], replacement = "") %in% c("Neo.XY", "Neo.ZW")){
pfSA.tab$state[i] <- karyotypes[i]
pfSA.tab$pfsa[i] <- Pfsa(Da = as.numeric(gsub(pattern = "[A-z]",
x= karyotypes[i] ,
replacement = "")) * 2 - 2,
scs = "XY")
}
# for XXY / ZZW
if(gsub(pattern = "[0-9]",x= karyotypes[i], replacement = "") %in% c("XXY","ZZW")){
pfSA.tab$state[i] <- karyotypes[i]
pfSA.tab$pfsa[i] <- Pfsa(Da = as.numeric(gsub(pattern = "[A-z./]",
x= karyotypes[i] ,
replacement = "")),
scs = "XXY")
}
# for XYY / ZWW
if(gsub(pattern = "[0-9]",x= karyotypes[i], replacement = "") %in% c("XYY", "ZWW")){
pfSA.tab$state[i] <- karyotypes[i]
pfSA.tab$pfsa[i] <- Pfsa(Da = as.numeric(gsub(pattern = "[A-z./]",
x= karyotypes[i] ,
replacement = "")),
scs = "XYY")
}
}
pfSA.tab
karyotypes
1:length(karyotypes)-1
length(karyotypes)
# now we get the expected pfsa
# make a table to hold the pfsa given scs and chrom number
pfSA.tab <- as.data.frame(matrix(data = NA, nrow = length(karyotypes), ncol = 2))
colnames(pfSA.tab) <- c("state", "pfsa")
pfSA.tab <- pfSA.tab[-9,]
for(i in 1:length(karyotypes)-1){
# for XO / ZO
if(gsub(pattern = "[0-9]",x= karyotypes[i], replacement = "") %in% c("XO", "ZO")){
pfSA.tab$state[i] <- karyotypes[i]
pfSA.tab$pfsa[i] <- Pfsa(Da = as.numeric(gsub(pattern = "[A-z]",
x= karyotypes[i] ,
replacement = "")),
scs = "XO")
}
# for XY / ZW
if(gsub(pattern = "[0-9]",x= karyotypes[i], replacement = "") %in% c("XY", "ZW")){
pfSA.tab$state[i] <- karyotypes[i]
pfSA.tab$pfsa[i] <- Pfsa(Da = as.numeric(gsub(pattern = "[A-z]",
x= karyotypes[i] ,
replacement = "")) * 2 - 2,
scs = "XY")
}
# for Neo.XY / Neo.ZW
if(gsub(pattern = "[0-9]",x= karyotypes[i], replacement = "") %in% c("Neo.XY", "Neo.ZW")){
pfSA.tab$state[i] <- karyotypes[i]
pfSA.tab$pfsa[i] <- Pfsa(Da = as.numeric(gsub(pattern = "[A-z]",
x= karyotypes[i] ,
replacement = "")) * 2 - 2,
scs = "XY")
}
# for XXY / ZZW
if(gsub(pattern = "[0-9]",x= karyotypes[i], replacement = "") %in% c("XXY","ZZW")){
pfSA.tab$state[i] <- karyotypes[i]
pfSA.tab$pfsa[i] <- Pfsa(Da = as.numeric(gsub(pattern = "[A-z./]",
x= karyotypes[i] ,
replacement = "")),
scs = "XXY")
}
# for XYY / ZWW
if(gsub(pattern = "[0-9]",x= karyotypes[i], replacement = "") %in% c("XYY", "ZWW")){
pfSA.tab$state[i] <- karyotypes[i]
pfSA.tab$pfsa[i] <- Pfsa(Da = as.numeric(gsub(pattern = "[A-z./]",
x= karyotypes[i] ,
replacement = "")),
scs = "XYY")
}
}
1:(length(karyotypes)-1)
# now we get the expected pfsa
# make a table to hold the pfsa given scs and chrom number
pfSA.tab <- as.data.frame(matrix(data = NA, nrow = length(karyotypes), ncol = 2))
colnames(pfSA.tab) <- c("state", "pfsa")
pfSA.tab <- pfSA.tab[-9,]
for(i in 1:(length(karyotypes)-1)){
# for XO / ZO
if(gsub(pattern = "[0-9]",x= karyotypes[i], replacement = "") %in% c("XO", "ZO")){
pfSA.tab$state[i] <- karyotypes[i]
pfSA.tab$pfsa[i] <- Pfsa(Da = as.numeric(gsub(pattern = "[A-z]",
x= karyotypes[i] ,
replacement = "")),
scs = "XO")
}
# for XY / ZW
if(gsub(pattern = "[0-9]",x= karyotypes[i], replacement = "") %in% c("XY", "ZW")){
pfSA.tab$state[i] <- karyotypes[i]
pfSA.tab$pfsa[i] <- Pfsa(Da = as.numeric(gsub(pattern = "[A-z]",
x= karyotypes[i] ,
replacement = "")) * 2 - 2,
scs = "XY")
}
# for Neo.XY / Neo.ZW
if(gsub(pattern = "[0-9]",x= karyotypes[i], replacement = "") %in% c("Neo.XY", "Neo.ZW")){
pfSA.tab$state[i] <- karyotypes[i]
pfSA.tab$pfsa[i] <- Pfsa(Da = as.numeric(gsub(pattern = "[A-z]",
x= karyotypes[i] ,
replacement = "")) * 2 - 2,
scs = "XY")
}
# for XXY / ZZW
if(gsub(pattern = "[0-9]",x= karyotypes[i], replacement = "") %in% c("XXY","ZZW")){
pfSA.tab$state[i] <- karyotypes[i]
pfSA.tab$pfsa[i] <- Pfsa(Da = as.numeric(gsub(pattern = "[A-z./]",
x= karyotypes[i] ,
replacement = "")),
scs = "XXY")
}
# for XYY / ZWW
if(gsub(pattern = "[0-9]",x= karyotypes[i], replacement = "") %in% c("XYY", "ZWW")){
pfSA.tab$state[i] <- karyotypes[i]
pfSA.tab$pfsa[i] <- Pfsa(Da = as.numeric(gsub(pattern = "[A-z./]",
x= karyotypes[i] ,
replacement = "")),
scs = "XYY")
}
}
# get the expeveted pSA
expSA <- vector(mode = "numeric", length = length(karyotypes))
for(i in 1:nsim){
times <- describe.simmap(hists[[i]])$times[2, -(nrow(pfSA.tab)+1)]
expSA[i] <- sum(times * pfSA.tab$pfsa)
}
# load libraries
library(phytools)
# get the expeveted pSA
expSA <- vector(mode = "numeric", length = length(karyotypes))
for(i in 1:nsim){
times <- describe.simmap(hists[[i]])$times[2, -(nrow(pfSA.tab)+1)]
expSA[i] <- sum(times * pfSA.tab$pfsa)
}
# lets plot
# clear any previous plots
dev.off()
# get the densities of expected and observed pfsa
den.exp <- density(expSA)
den.obs <- density(obspropSA)
# define the limits of the plot region
xlim <- c(min(den.exp$x, den.obs$x), max(den.exp$x, den.obs$x))
ymax <- max(den.exp$y, den.obs$y)
ymin <- 0 - (ymax *.1)
ylim <- c(ymin, ymax)
plot(den.exp,
xlim = xlim,
ylim = ylim,
main = "Drosophila",
xlab = "Proportion sex-autosome fusion",
cex.axis = 1, cex.lab = 1)
polygon(den.exp,
col = rgb(1, 0, 0, .3))
lines(den.obs)
polygon(den.obs,
col = rgb(0, 0, 1, .3))
# get the densities of expected and observed pfsa
den.exp <- density(expSA,bw = .99)
den.obs <- density(obspropSA)
# define the limits of the plot region
xlim <- c(min(den.exp$x, den.obs$x), max(den.exp$x, den.obs$x))
ymax <- max(den.exp$y, den.obs$y)
ymin <- 0 - (ymax *.1)
ylim <- c(ymin, ymax)
plot(den.exp,
xlim = xlim,
ylim = ylim,
main = "Drosophila",
xlab = "Proportion sex-autosome fusion",
cex.axis = 1, cex.lab = 1)
polygon(den.exp,
col = rgb(1, 0, 0, .3))
lines(den.obs)
polygon(den.obs,
col = rgb(0, 0, 1, .3))
# make legend
xpoint <- rep(0.1,2)
points(x = xpoint,
y = c((ymax - ymax * .05), (ymax - ymax * .1)),
pch = 15,
col = c(rgb(1, 0, 0, .5),
rgb(0, 0, 1, .5)),
cex = 1.5)
text(x = xpoint,
y = c((ymax - ymax * .05), (ymax - ymax * .1)),
labels = c("Expected", "Inferred"),
pos = 4,cex = .8)
# get the HPD intervals
HPDobsPsa <- HPDinterval(as.mcmc(obspropSA))
HPDexpPsa <- HPDinterval(as.mcmc(expSA))
# plot the HPD intervals
# expected
segments(x0 = HPDexpPsa[,1],
x1 = HPDexpPsa[,2],
y0 = ymin,
y1 = ymin,
col = rgb(1, 0, 0, .5),
lwd = 3)
# observed
segments(x0 = HPDobsPsa[,1],
x1 = HPDobsPsa[,2],
y0 = ymin/2,
y1 = ymin/2,
col = rgb(0, 0, 1, .5),
lwd = 3)
# save results
save.image("../results/pfsa.dros.analysis.RData")
# get the densities of expected and observed pfsa
den.exp <- density(expSA,bw = .09)
den.obs <- density(obspropSA)
# define the limits of the plot region
xlim <- c(min(den.exp$x, den.obs$x), max(den.exp$x, den.obs$x))
ymax <- max(den.exp$y, den.obs$y)
ymin <- 0 - (ymax *.1)
ylim <- c(ymin, ymax)
plot(den.exp,
xlim = xlim,
ylim = ylim,
main = "Drosophila",
xlab = "Proportion sex-autosome fusion",
cex.axis = 1, cex.lab = 1)
polygon(den.exp,
col = rgb(1, 0, 0, .3))
lines(den.obs)
polygon(den.obs,
col = rgb(0, 0, 1, .3))
# make legend
xpoint <- rep(0.1,2)
points(x = xpoint,
y = c((ymax - ymax * .05), (ymax - ymax * .1)),
pch = 15,
col = c(rgb(1, 0, 0, .5),
rgb(0, 0, 1, .5)),
cex = 1.5)
text(x = xpoint,
y = c((ymax - ymax * .05), (ymax - ymax * .1)),
labels = c("Expected", "Inferred"),
pos = 4,cex = .8)
# get the HPD intervals
HPDobsPsa <- HPDinterval(as.mcmc(obspropSA))
HPDexpPsa <- HPDinterval(as.mcmc(expSA))
# plot the HPD intervals
# expected
segments(x0 = HPDexpPsa[,1],
x1 = HPDexpPsa[,2],
y0 = ymin,
y1 = ymin,
col = rgb(1, 0, 0, .5),
lwd = 3)
# observed
segments(x0 = HPDobsPsa[,1],
x1 = HPDobsPsa[,2],
y0 = ymin/2,
y1 = ymin/2,
col = rgb(0, 0, 1, .5),
lwd = 3)
# get the densities of expected and observed pfsa
den.exp <- density(expSA,bw = .009)
den.obs <- density(obspropSA)
# define the limits of the plot region
xlim <- c(min(den.exp$x, den.obs$x), max(den.exp$x, den.obs$x))
ymax <- max(den.exp$y, den.obs$y)
ymin <- 0 - (ymax *.1)
ylim <- c(ymin, ymax)
plot(den.exp,
xlim = xlim,
ylim = ylim,
main = "Drosophila",
xlab = "Proportion sex-autosome fusion",
cex.axis = 1, cex.lab = 1)
polygon(den.exp,
col = rgb(1, 0, 0, .3))
lines(den.obs)
polygon(den.obs,
col = rgb(0, 0, 1, .3))
# lets plot
# clear any previous plots
dev.off()
# get the densities of expected and observed pfsa
den.exp <- density(expSA,bw = .009)
den.obs <- density(obspropSA, bw = 0.009)
# define the limits of the plot region
xlim <- c(min(den.exp$x, den.obs$x), max(den.exp$x, den.obs$x))
ymax <- max(den.exp$y, den.obs$y)
ymin <- 0 - (ymax *.1)
ylim <- c(ymin, ymax)
plot(den.exp,
xlim = xlim,
ylim = ylim,
main = "Drosophila",
xlab = "Proportion sex-autosome fusion",
cex.axis = 1, cex.lab = 1)
polygon(den.exp,
col = rgb(1, 0, 0, .3))
lines(den.obs)
polygon(den.obs,
col = rgb(0, 0, 1, .3))
# make legend
xpoint <- rep(0.1,2)
points(x = xpoint,
y = c((ymax - ymax * .05), (ymax - ymax * .1)),
pch = 15,
col = c(rgb(1, 0, 0, .5),
rgb(0, 0, 1, .5)),
cex = 1.5)
text(x = xpoint,
y = c((ymax - ymax * .05), (ymax - ymax * .1)),
labels = c("Expected", "Inferred"),
pos = 4,cex = .8)
# get the HPD intervals
HPDobsPsa <- HPDinterval(as.mcmc(obspropSA))
HPDexpPsa <- HPDinterval(as.mcmc(expSA))
# plot the HPD intervals
# expected
segments(x0 = HPDexpPsa[,1],
x1 = HPDexpPsa[,2],
y0 = ymin,
y1 = ymin,
col = rgb(1, 0, 0, .5),
lwd = 3)
# observed
segments(x0 = HPDobsPsa[,1],
x1 = HPDobsPsa[,2],
y0 = ymin/2,
y1 = ymin/2,
col = rgb(0, 0, 1, .5),
lwd = 3)
# save results
save.image("../results/pfsa.dros.analysis.RData")
# plot the HPD intervals
# expected
segments(x0 = HPDexpPsa[,1],
x1 = HPDexpPsa[,2],
y0 = ymin,
y1 = ymin,
col = rgb(1, 0, 0, .5),
lwd = 3)
# observed
segments(x0 = HPDobsPsa[,1],
x1 = HPDobsPsa[,2],
y0 = ymin/2,
y1 = ymin/2,
col = rgb(0, 0, 1, .5),
lwd = 3)
HPDexpPsa
# get the densities of expected and observed pfsa
den.exp <- density(expSA)
den.obs <- density(obspropSA, bw = 0.009)
# define the limits of the plot region
xlim <- c(min(den.exp$x, den.obs$x), max(den.exp$x, den.obs$x))
ymax <- max(den.exp$y, den.obs$y)
ymin <- 0 - (ymax *.1)
ylim <- c(ymin, ymax)
plot(den.exp,
xlim = xlim,
ylim = ylim,
main = "Drosophila",
xlab = "Proportion sex-autosome fusion",
cex.axis = 1, cex.lab = 1)
polygon(den.exp,
col = rgb(1, 0, 0, .3))
lines(den.obs)
polygon(den.obs,
col = rgb(0, 0, 1, .3))
# make legend
xpoint <- rep(0.1,2)
points(x = xpoint,
y = c((ymax - ymax * .05), (ymax - ymax * .1)),
pch = 15,
col = c(rgb(1, 0, 0, .5),
rgb(0, 0, 1, .5)),
cex = 1.5)
text(x = xpoint,
y = c((ymax - ymax * .05), (ymax - ymax * .1)),
labels = c("Expected", "Inferred"),
pos = 4,cex = .8)
# get the HPD intervals
HPDobsPsa <- HPDinterval(as.mcmc(obspropSA))
HPDexpPsa <- HPDinterval(as.mcmc(expSA))
# plot the HPD intervals
# expected
segments(x0 = HPDexpPsa[,1],
x1 = HPDexpPsa[,2],
y0 = ymin,
y1 = ymin,
col = rgb(1, 0, 0, .5),
lwd = 3)
# observed
segments(x0 = HPDobsPsa[,1],
x1 = HPDobsPsa[,2],
y0 = ymin/2,
y1 = ymin/2,
col = rgb(0, 0, 1, .5),
lwd = 3)
expSA
HPDinterval(as.mcmc(expSA))
library(coda)
# get the densities of expected and observed pfsa
den.exp <- density(expSA, bw = 0.009)
den.obs <- density(obspropSA, bw = 0.009)
# define the limits of the plot region
xlim <- c(min(den.exp$x, den.obs$x), max(den.exp$x, den.obs$x))
ymax <- max(den.exp$y, den.obs$y)
ymin <- 0 - (ymax *.1)
ylim <- c(ymin, ymax)
plot(den.exp,
xlim = xlim,
ylim = ylim,
main = "Drosophila",
xlab = "Proportion sex-autosome fusion",
cex.axis = 1, cex.lab = 1)
polygon(den.exp,
col = rgb(1, 0, 0, .3))
lines(den.obs)
polygon(den.obs,
col = rgb(0, 0, 1, .3))
# make legend
xpoint <- rep(0.1,2)
points(x = xpoint,
y = c((ymax - ymax * .05), (ymax - ymax * .1)),
pch = 15,
col = c(rgb(1, 0, 0, .5),
rgb(0, 0, 1, .5)),
cex = 1.5)
text(x = xpoint,
y = c((ymax - ymax * .05), (ymax - ymax * .1)),
labels = c("Expected", "Inferred"),
pos = 4,cex = .8)
# get the HPD intervals
HPDobsPsa <- HPDinterval(as.mcmc(obspropSA))
HPDexpPsa <- HPDinterval(as.mcmc(expSA))
# plot the HPD intervals
# expected
segments(x0 = HPDexpPsa[,1],
x1 = HPDexpPsa[,2],
y0 = ymin,
y1 = ymin,
col = rgb(1, 0, 0, .5),
lwd = 3)
# observed
segments(x0 = HPDobsPsa[,1],
x1 = HPDobsPsa[,2],
y0 = ymin/2,
y1 = ymin/2,
col = rgb(0, 0, 1, .5),
lwd = 3)
# save results
save.image("../results/pfsa.dros.analysis.RData")
