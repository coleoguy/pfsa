if (ncol(qmat) < 10)
pad <- 1
parMat <- qmat
colnames(parMat) <- sprintf(paste("%0", pad, "d", sep = ""), 1:ncol(parMat))
rownames(parMat) <- colnames(parMat)
rate.table <- as.data.frame(matrix(, nrow(parMat) * ncol(parMat),3))
rate.table[, 1] <- rep(as.character(row.names(parMat)), each = ncol(parMat))
rate.table[, 2] <- rep(as.character(colnames(parMat)), nrow(parMat))
rate.table[, 3] <- as.character(c(t(parMat)))
rate.table <- rate.table[rate.table[, 1] != rate.table[2],]
# r1 = 1,    # AA fusion  XO
# r2 = 2,    # AA fission XO
# r3 = 3,    # AA fusion  XY
# r4 = 4,    # AA fission XY
# r5 = 5,    # AA fusion  Neo.XY
# r6 = 6,    # AA fission Neo.XY
# r7 = 7,    # AA fusion  XXY
# r8 = 8,    # AA fission XXY
# r9 = 9,    # AA fusion  XYY
# r10 = 10,  # AA fission XYY
# r11 = 11,  # SA fusion  XO -> XY
# r12 = 12,  # SA fusion  XY -> Neo.XY
# r13 = 13,  # SA fusion  XY -> XXY
# r14 = 14,  # SA fusion  XY -> XYY
# r15 = 15,  # transision Neo.XY -> XY
# r16 = 16,  # X fission  XY -> XXY
# r17 = 17,  # Y fission  XY -> XYY
# r18 = 18,  # Y loss     XY -> XO
# r19 = 19,  # Y loss     XYY -> XY
# r20 = 20,  # X fusion   XXY -> XY
# r21 = 21,  # Y capture  XO -> XY
# r22 = 22,  # polyploidy XO
# r23 = 23,  # polyploidy XY
# r24 = 24,  # polyploidy Neo.XY
# r25 = 25,  # polyploidy XXY
# r26 = 26,  # polyploidy XYY
# r27 = 27,  # translocation XO -> XXY (White(1973), Animal cytology and evolution)
rate.table[rate.table[, 3] == 1, 3] <- "r01"
rate.table[rate.table[, 3] == 2, 3] <- "r02"
rate.table[rate.table[, 3] == 3, 3] <- "r03"
rate.table[rate.table[, 3] == 4, 3] <- "r04"
rate.table[rate.table[, 3] == 5, 3] <- "r05"
rate.table[rate.table[, 3] == 6, 3] <- "r06"
rate.table[rate.table[, 3] == 7, 3] <- "r07"
rate.table[rate.table[, 3] == 8, 3] <- "r08"
rate.table[rate.table[, 3] == 9, 3] <- "r09"
rate.table[rate.table[, 3] == 10, 3] <- "r10"
rate.table[rate.table[, 3] == 11, 3] <- "rq1"
rate.table[rate.table[, 3] == 12, 3] <- "r12"
rate.table[rate.table[, 3] == 13, 3] <- "r13"
rate.table[rate.table[, 3] == 14, 3] <- "r14"
rate.table[rate.table[, 3] == 15, 3] <- "r15"
rate.table[rate.table[, 3] == 16, 3] <- "r16"
rate.table[rate.table[, 3] == 17, 3] <- "r17"
rate.table[rate.table[, 3] == 18, 3] <- "r18"
rate.table[rate.table[, 3] == 19, 3] <- "r19"
rate.table[rate.table[, 3] == 20, 3] <- "r20"
rate.table[rate.table[, 3] == 21, 3] <- "r21"
rate.table[rate.table[, 3] == 22, 3] <- "r22"
rate.table[rate.table[, 3] == 23, 3] <- "r23"
rate.table[rate.table[, 3] == 24, 3] <- "r24"
rate.table[rate.table[, 3] == 25, 3] <- "r25"
rate.table[rate.table[, 3] == 26, 3] <- "r26"
rate.table[rate.table[, 3] == 27, 3] <- "r27"
formulae <- vector(mode = "character", length = nrow(rate.table))
for (i in 1:nrow(rate.table)) {
formulae[i] <- paste("q",
rate.table[i, 1],
rate.table[i,2],
" ~ ",
rate.table[i, 3],
collapse = "",
sep = "")
lambda <- mu <- vector()
for(i in 1:ncol(parMat)){
lambda <- c(lambda, paste("lambda", colnames(parMat)[i],
" ~ lambda1", sep = ""))
mu <- c(mu, paste("mu", colnames(parMat)[i],
" ~ mu1", sep = ""))
}
}
extras <- c("r01",
"r02",
"r03",
"r04",
"r05",
"r06",
"r07",
"r08",
"r09",
"r10",
"r11",
"r12",
"r13",
"r14",
"r15",
"r16",
"r17",
"r18",
"r19",
"r20",
"r21",
"r22",
"r23",
"r24",
"r25",
"r26",
"r27",
"lambda1",
"mu1")
lik.con <- constrain(lik, formulae = c(formulae, lambda,
mu), extra = extras)
colnames(parMat) <- rownames(parMat) <- colnames(qmat)
if (verbose == T)
return(list(lik.con, parMat))
if (verbose == F)
return(lik.con)
}
constrainQmat(qmat = qmat, lik = lik)
con.lik <- constrainQmat(qmat = qmat, lik = lik)
diversitree::mcmc(con.lik,x.init = c(1,1,1,1,1,1,1))
?mcmc
diversitree::mcmc(con.lik,x.init = c(1,1,1,1,1,1,1), nsteps = 10)
diversitree::mcmc(con.lik,x.init = c(1,1,1,1,1,1,1), nsteps = 10, w = 1)
con.lik
diversitree::mcmc(con.lik,
x.init = c(1,1,1,1,1,1,1),
nsteps = 10,
w = 1)
con.lik <- constrainQmat(qmat = qmat, lik = lik)
?constrainMuSSE
?make.musse
## 1: BiSSE equivalence
pars <- c(.1, .2, .03, .04, 0.05, 0.1)
set.seed(2)
tree.musse(pars, 20, x0=1)
phy <- tree.musse(pars, 20, x0=1)
phy
phy <- tree.musse(pars, 20, x0=1)
phy
phy$tip.state
make.musse(phy, phy$tip.state, 2)
# keep these tips only
phy <- vector(mode = "list", length = length(trees))
for(i in 1:100){
phy[[i]] <- keep.tip(trees[[i]], dat$species)
}
class(phy) <- "multiPhylo"
MuSSE.states
lik <- make.musse(tree = phy[[1]],
states = MuSSE.states,
strict = F,
k = max(MuSSE.states),
control = list(method = "ode"))
lik
argnames(lik)
if (ncol(qmat) < 100)
pad <- 2
if (ncol(qmat) >= 100)
pad <- 3
if (ncol(qmat) < 10)
pad <- 1
parMat <- qmat
colnames(parMat) <- sprintf(paste("%0", pad, "d", sep = ""), 1:ncol(parMat))
rownames(parMat) <- colnames(parMat)
rate.table <- as.data.frame(matrix(, nrow(parMat) * ncol(parMat),3))
rate.table[, 1] <- rep(as.character(row.names(parMat)), each = ncol(parMat))
rate.table[, 2] <- rep(as.character(colnames(parMat)), nrow(parMat))
rate.table[, 3] <- as.character(c(t(parMat)))
rate.table <- rate.table[rate.table[, 1] != rate.table[2],]
# r18 = 18,  # Y loss     XY -> XO
# r19 = 19,  # Y loss     XYY -> XY
# r20 = 20,  # X fusion   XXY -> XY
# r21 = 21,  # Y capture  XO -> XY
# r22 = 22,  # polyploidy XO
# r23 = 23,  # polyploidy XY
# r24 = 24,  # polyploidy Neo.XY
# r25 = 25,  # polyploidy XXY
# r26 = 26,  # polyploidy XYY
# r27 = 27,  # translocation XO -> XXY (White(1973), Animal cytology and evolution)
rate.table[rate.table[, 3] == 1, 3] <- "r01"
rate.table[rate.table[, 3] == 2, 3] <- "r02"
rate.table[rate.table[, 3] == 3, 3] <- "r03"
rate.table[rate.table[, 3] == 4, 3] <- "r04"
rate.table[rate.table[, 3] == 5, 3] <- "r05"
rate.table[rate.table[, 3] == 6, 3] <- "r06"
rate.table[rate.table[, 3] == 7, 3] <- "r07"
rate.table[rate.table[, 3] == 8, 3] <- "r08"
rate.table[rate.table[, 3] == 9, 3] <- "r09"
rate.table[rate.table[, 3] == 10, 3] <- "r10"
rate.table[rate.table[, 3] == 11, 3] <- "rq1"
rate.table[rate.table[, 3] == 12, 3] <- "r12"
rate.table[rate.table[, 3] == 13, 3] <- "r13"
rate.table[rate.table[, 3] == 14, 3] <- "r14"
rate.table[rate.table[, 3] == 15, 3] <- "r15"
rate.table[rate.table[, 3] == 16, 3] <- "r16"
rate.table[rate.table[, 3] == 17, 3] <- "r17"
rate.table[rate.table[, 3] == 18, 3] <- "r18"
rate.table[rate.table[, 3] == 19, 3] <- "r19"
rate.table[rate.table[, 3] == 20, 3] <- "r20"
rate.table[rate.table[, 3] == 21, 3] <- "r21"
rate.table[rate.table[, 3] == 22, 3] <- "r22"
rate.table[rate.table[, 3] == 23, 3] <- "r23"
rate.table[rate.table[, 3] == 24, 3] <- "r24"
rate.table[rate.table[, 3] == 25, 3] <- "r25"
rate.table[rate.table[, 3] == 26, 3] <- "r26"
rate.table[rate.table[, 3] == 27, 3] <- "r27"
formulae <- vector(mode = "character", length = nrow(rate.table))
for (i in 1:nrow(rate.table)) {
formulae[i] <- paste("q",
rate.table[i, 1],
rate.table[i,2],
" ~ ",
rate.table[i, 3],
collapse = "",
sep = "")
lambda <- mu <- vector()
for(i in 1:ncol(parMat)){
lambda <- c(lambda, paste("lambda", colnames(parMat)[i],
" ~ lambda1", sep = ""))
mu <- c(mu, paste("mu", colnames(parMat)[i],
" ~ mu1", sep = ""))
}
}
extras <- c("r01",
"r02",
"r03",
"r04",
"r05",
"r06",
"r07",
"r08",
"r09",
"r10",
"r11",
"r12",
"r13",
"r14",
"r15",
"r16",
"r17",
"r18",
"r19",
"r20",
"r21",
"r22",
"r23",
"r24",
"r25",
"r26",
"r27",
"lambda1",
"mu1")
constrain(lik, formulae = c(formulae, lambda,
mu), extra = extras)
formulae
lambda
mu
constrain(lik, formulae = c(lambda,
mu), extra = extras)
constrain(lik, formulae = c(lambda,
mu), extra = extras)
constrain(lik, formulae = c(formulae, lambda,
mu), extra = extras)
formulae
constrain(lik, formulae = c("q0102 ~ r01"), extra = extras)
constrain(lik, formulae = c("q0102 ~ r01", "q2324 ~ r01"), extra = extras)
constrain(lik, formulae = c("q0102 ~ r01", "q2324 ~ r01", "q0105 ~ 0"), extra = extras)
constrain(lik, formulae = c("q0102 ~ r01", "q2324 ~ r01", "q0105 ~ 0", "q2726 ~ r02"), extra = extras)
constrain(lik, formulae = c("q0102 ~ r01", "q2324 ~ r01", "q0105 ~ 0", "q0201 ~ r02"), extra = extras)
lik.con <- constrain(lik, formulae = c("q0102 ~ r01", "q2324 ~ r01", "q0105 ~ 0", "q0201 ~ r02"), extra = extras)
diversitree::mcmc(lik.con,
x.init = c(1,1,1,1,1,1,1),
nsteps = 10,
w = 1)
lik.con
diversitree::mcmc(lik.con,
x.init = rep(1,648),
nsteps = 10,
w = 1)
lik
constrainQmat <-  function (qmat, lik, verbose = F) {
if (ncol(qmat) < 100)
pad <- 2
if (ncol(qmat) >= 100)
pad <- 3
if (ncol(qmat) < 10)
pad <- 1
parMat <- qmat
colnames(parMat) <- sprintf(paste("%0", pad, "d", sep = ""), 1:ncol(parMat))
rownames(parMat) <- colnames(parMat)
rate.table <- as.data.frame(matrix(, nrow(parMat) * ncol(parMat),3))
rate.table[, 1] <- rep(as.character(row.names(parMat)), each = ncol(parMat))
rate.table[, 2] <- rep(as.character(colnames(parMat)), nrow(parMat))
rate.table[, 3] <- as.character(c(t(parMat)))
rate.table <- rate.table[rate.table[, 1] != rate.table[2],]
# r1 = 1,    # AA fusion  XO
# r2 = 2,    # AA fission XO
# r3 = 3,    # AA fusion  XY
# r4 = 4,    # AA fission XY
# r5 = 5,    # AA fusion  Neo.XY
# r6 = 6,    # AA fission Neo.XY
# r7 = 7,    # AA fusion  XXY
# r8 = 8,    # AA fission XXY
# r9 = 9,    # AA fusion  XYY
# r10 = 10,  # AA fission XYY
# r11 = 11,  # SA fusion  XO -> XY
# r12 = 12,  # SA fusion  XY -> Neo.XY
# r13 = 13,  # SA fusion  XY -> XXY
# r14 = 14,  # SA fusion  XY -> XYY
# r15 = 15,  # transision Neo.XY -> XY
# r16 = 16,  # X fission  XY -> XXY
# r17 = 17,  # Y fission  XY -> XYY
# r18 = 18,  # Y loss     XY -> XO
# r19 = 19,  # Y loss     XYY -> XY
# r20 = 20,  # X fusion   XXY -> XY
# r21 = 21,  # Y capture  XO -> XY
# r22 = 22,  # polyploidy XO
# r23 = 23,  # polyploidy XY
# r24 = 24,  # polyploidy Neo.XY
# r25 = 25,  # polyploidy XXY
# r26 = 26,  # polyploidy XYY
# r27 = 27,  # translocation XO -> XXY (White(1973), Animal cytology and evolution)
rate.table[rate.table[, 3] == 1, 3] <- "r01"
rate.table[rate.table[, 3] == 2, 3] <- "r02"
rate.table[rate.table[, 3] == 3, 3] <- "r03"
rate.table[rate.table[, 3] == 4, 3] <- "r04"
rate.table[rate.table[, 3] == 5, 3] <- "r05"
rate.table[rate.table[, 3] == 6, 3] <- "r06"
rate.table[rate.table[, 3] == 7, 3] <- "r07"
rate.table[rate.table[, 3] == 8, 3] <- "r08"
rate.table[rate.table[, 3] == 9, 3] <- "r09"
rate.table[rate.table[, 3] == 10, 3] <- "r10"
rate.table[rate.table[, 3] == 11, 3] <- "rq1"
rate.table[rate.table[, 3] == 12, 3] <- "r12"
rate.table[rate.table[, 3] == 13, 3] <- "r13"
rate.table[rate.table[, 3] == 14, 3] <- "r14"
rate.table[rate.table[, 3] == 15, 3] <- "r15"
rate.table[rate.table[, 3] == 16, 3] <- "r16"
rate.table[rate.table[, 3] == 17, 3] <- "r17"
rate.table[rate.table[, 3] == 18, 3] <- "r18"
rate.table[rate.table[, 3] == 19, 3] <- "r19"
rate.table[rate.table[, 3] == 20, 3] <- "r20"
rate.table[rate.table[, 3] == 21, 3] <- "r21"
rate.table[rate.table[, 3] == 22, 3] <- "r22"
rate.table[rate.table[, 3] == 23, 3] <- "r23"
rate.table[rate.table[, 3] == 24, 3] <- "r24"
rate.table[rate.table[, 3] == 25, 3] <- "r25"
rate.table[rate.table[, 3] == 26, 3] <- "r26"
rate.table[rate.table[, 3] == 27, 3] <- "r27"
formulae <- vector(mode = "character", length = nrow(rate.table))
for (i in 1:nrow(rate.table)) {
formulae[i] <- paste("q",
rate.table[i, 1],
rate.table[i,2],
" ~ ",
rate.table[i, 3],
collapse = "",
sep = "")
lambda <- mu <- vector()
for(i in 1:ncol(parMat)){
lambda <- c(lambda, paste("lambda", colnames(parMat)[i],
" ~ lambda1", sep = ""))
mu <- c(mu, paste("mu", colnames(parMat)[i],
" ~ mu1", sep = ""))
}
}
extras <- c("r01",
"r02",
"r03",
"r04",
"r05",
"r06",
"r07",
"r08",
"r09",
"r10",
"r11",
"r12",
"r13",
"r14",
"r15",
"r16",
"r17",
"r18",
"r19",
"r20",
"r21",
"r22",
"r23",
"r24",
"r25",
"r26",
"r27",
"lambda1",
"mu1")
lik.con <- constrain(lik, formulae = c(formulae, lambda, mu), extra = extras)
colnames(parMat) <- rownames(parMat) <- colnames(qmat)
if (verbose == T)
return(list(lik.con, parMat))
if (verbose == F)
return(lik.con)
}
# load helper functions
source("helper.functions.R")
# defininf the number of simulations that will be performed
nsim <- 100
# get data
dat <- GetData(trees = "../data/Trees/posterior.trees.nex",
data = "../data/chrom.data/chroms.csv")
# read in trees
trees <- read.nexus("../data/Trees/posterior.trees.nex")
# lets try this to orthoptera
dat <- dat[dat$order == "Orthoptera",]
# rename some of the scs for clarity'=
dat$SCS[dat$notes == "X1X1X2X2/X1X2Y1"] <- "XXY"
dat$SCS[dat$notes == "X1X1/X1Y1Y2"] <- "XYY"
dat$SCS[dat$notes == "X1X1X2X2/X1X2Y"] <- "XXY"
dat$SCS[dat$SCS == "XY|homomorphic"] <- "XY"
# isolate those data that we need
dat <- dat[dat$SCS %in% c("XO", "XY", "XXY", "XYY"),]
# remove species that have no chromosome number data
dat <- dat[!(is.na(dat$haploid)),]
dat$hap.auto[dat$SCS == "XO"] <- dat$haploid[dat$SCS == "XO"] - 1
dat$hap.auto[dat$SCS == "XY"] <- dat$haploid[dat$SCS == "XY"] - 1
dat$hap.auto[dat$SCS == "XXY"] <- dat$haploid[dat$SCS == "XXY"] - 2
dat$hap.auto[dat$SCS == "XYY"] <- dat$haploid[dat$SCS == "XYY"] - 1
# keep these tips only
phy <- vector(mode = "list", length = length(trees))
for(i in 1:100){
phy[[i]] <- keep.tip(trees[[i]], dat$species)
}
class(phy) <- "multiPhylo"
# make a data table to hold the species names, chromosome number and
# sex chromosome system
dat.new <-  as.data.frame(matrix(data=NA, nrow = Ntip(phy[[1]]), ncol = 3))
colnames(dat.new) <- c("SpeciesName", "chroms", "scs")
# fill in the data table
dat.new$SpeciesName <- dat$species
dat.new$chroms <- dat$hap.auto
dat.new$scs <- dat$SCS
# now we get the qmatrix and pmatrix
inputs <- get.matrixes.v2(haploid.scs = T,
autosome.as.input = T,
Neo.sex = F,
complex = T,
chrom.range.expansion = 0,
dat = dat.new,
trees = phy,
def.rates = list(r01 = 1,
r02 = 2,
r03 = 1,
r04 = 2,
r05 = 1,
r06 = 2,
r07 = 1,
r08 = 2,
r09 = 1,
r10 = 2,
r11 = 3,
r13 = 3,
r14 = 3,
r16 = 0,
r17 = 0,
r19 = 0,
r20 = 0))
# get the relavent inputs
qmat <- inputs$qmat
pmat <- inputs$pmat
# trees <- inputs$trees
states <- inputs$states
karyotypes <- inputs$karyotypes
dat.new$Karyotype <- paste(dat.new$chroms, dat.new$scs, sep = "")
dat.new$Karyotype.states <- NA
for(i in 1:nrow(dat.new)){
dat.new$Karyotype.states[i] <- which(karyotypes %in% dat.new$Karyotype[i])
}
MuSSE.states <- dat.new$Karyotype.states
names(MuSSE.states) <- dat.new$SpeciesName
lik <- make.musse(tree = phy[[1]],
states = MuSSE.states,
strict = F,
k = max(MuSSE.states),
control = list(method = "ode"))
argnames(lik)
MuSSE.states
karyotypes
dat.new$Karyotype
lik <- make.musse(tree = phy[[1]],
states = MuSSE.states,
strict = F,
k = length(karyotypes),
control = list(method = "ode"))
argnames(lik)
con.lik <- constrainQmat(qmat = qmat, lik = lik)
argnames(con.lik)
diversitree::mcmc(lik.con,
x.init = rep(1,length(argnames(con.lik))),
nsteps = 10,
w = 1)
diversitree::mcmc(con.lik,
x.init = rep(1,length(argnames(con.lik))),
nsteps = 10,
w = 1)
diversitree::mcmc(con.lik,
x.init = rep(1,length(argnames(con.lik))),
nsteps = 10,
w = 1, upper = 1)
diversitree::mcmc(con.lik,
x.init = rep(1,length(argnames(con.lik))),
nsteps = 10,
w = 1, upper = 1)
