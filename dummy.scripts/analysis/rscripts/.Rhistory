pfSA.tab$pfsa[i] <- Pfsa(Da = as.numeric(gsub(pattern = "[A-z]",
x= karyotypes[i] ,
replacement = "")) * 2,
scs = "XY")
}
# for Neo.XY / Neo.ZW
if(gsub(pattern = "[0-9]",x= karyotypes[i], replacement = "") %in% c("Neo.XY", "Neo.ZW")){
pfSA.tab$state[i] <- karyotypes[i]
pfSA.tab$pfsa[i] <- Pfsa(Da = as.numeric(gsub(pattern = "[A-z]",
x= karyotypes[i] ,
replacement = "")) * 2,
scs = "XY")
}
# for XXY / ZZW
if(gsub(pattern = "[0-9]",x= karyotypes[i], replacement = "") %in% c("XXY","ZZW")){
pfSA.tab$state[i] <- karyotypes[i]
pfSA.tab$pfsa[i] <- Pfsa(Da = as.numeric(gsub(pattern = "[A-z./]",
x= karyotypes[i] ,
replacement = "")) * 2,
scs = "XXY")
}
# for XYY / ZWW
if(gsub(pattern = "[0-9]",x= karyotypes[i], replacement = "") %in% c("XYY", "ZWW")){
pfSA.tab$state[i] <- karyotypes[i]
pfSA.tab$pfsa[i] <- Pfsa(Da = as.numeric(gsub(pattern = "[A-z./]",
x= karyotypes[i] ,
replacement = "")) * 2,
scs = "XYY")
}
}
# get the expeveted pSA
expSA <- vector(mode = "numeric", length = length(hists))
for(i in 1:length(hists)){
times <- describe.simmap(hists[[i]])$times[2, -(nrow(pfSA.tab)+1)]
expSA[i] <- sum(times * pfSA.tab$pfsa)
}
# lets plot
# clear any previous plots
dev.off()
# get the densities of expected and observed pfsa
den.exp <- density(expSA, bw = 0.009)
den.obs <- density(obspropSA, bw = .009)
# define the limits of the plot region
xlim <- c(min(den.exp$x, den.obs$x), max(den.exp$x, den.obs$x))
ymax <- max(den.exp$y, den.obs$y)
ymin <- 0 - (ymax *.1)
ylim <- c(ymin, ymax)
plot(den.exp,
xlim = xlim,
ylim = ylim,
main = "",
xlab = "Proportion sex-autosome fusion",
cex.axis = 1, cex.lab = 1)
polygon(den.exp,
col = rgb(1, 0, 0, .3))
lines(den.obs)
polygon(den.obs,
col = rgb(0, 0, 1, .3))
# make legend
xpoint <- rep(0.45,2)
points(x = xpoint,
y = c((ymax - ymax * .05), (ymax - ymax * .1)),
pch = 15,
col = c(rgb(1, 0, 0, .5),
rgb(0, 0, 1, .5)),
cex = 1.5)
text(x = xpoint,
y = c((ymax - ymax * .05), (ymax - ymax * .1)),
labels = c("Expected", "Inferred"),
pos = 4,cex = .8)
# get the HPD intervals
HPDobsPsa <- HPDinterval(as.mcmc(obspropSA))
HPDexpPsa <- HPDinterval(as.mcmc(expSA))
# plot the HPD intervals
# expected
segments(x0 = HPDexpPsa[,1],
x1 = HPDexpPsa[,2],
y0 = ymin,
y1 = ymin,
col = rgb(1, 0, 0, .5),
lwd = 3)
# observed
segments(x0 = HPDobsPsa[,1],
x1 = HPDobsPsa[,2],
y0 = ymin/2,
y1 = ymin/2,
col = rgb(0, 0, 1, .5),
lwd = 3)
# Terrence Sylvester
# 27 October 2020
# pradakshanas@gmail.com
# load libraries
library(phytools)
library(chromePlus)
library(evobiR)
library(coda)
library(diversitree)
library(viridis)
# load helper functions
source("helper.functions.R")
# define the number of simulations that will be performed
nsim <- 100
prior <- make.prior.exponential(r = .5)
# make a place holder for results
results <- vector(mode = "list", length = 100)
# make a place holder for trees
trees <- vector(mode = "list",  length = 100)
for(i in 1:100){
# get data
dat <- GetData(trees = "../data/Trees/posterior.trees.nex",
data = "../data/chrom.data/chroms.csv")
# read in trees
tree <- read.nexus("../data/Trees/posterior.trees.nex")[[i]]
# lets try this to Orthoptera
dat <- dat[dat$order == "Orthoptera",]
# rename some of the scs for clarity'=
dat$SCS[dat$notes == "X1X1X2X2/X1X2Y1"] <- "XXY"
dat$SCS[dat$notes == "X1X1/X1Y1Y2"] <- "XYY"
dat$SCS[dat$notes == "X1X1X2X2/X1X2Y"] <- "XXY"
dat$SCS[dat$SCS == "XY|homomorphic"] <- "XY"
# isolate those data that we need
dat <- dat[dat$SCS %in% c("XO", "XY", "XXY", "XYY"),]
# remove species that have no chromosome number data
dat <- dat[!(is.na(dat$haploid)),]
# get the haploid chromosome number value
dat$hap.auto[dat$SCS == "XO"] <- dat$haploid[dat$SCS == "XO"] - 1
dat$hap.auto[dat$SCS == "XY"] <- dat$haploid[dat$SCS == "XY"] - 1
dat$hap.auto[dat$SCS == "XXY"] <- dat$haploid[dat$SCS == "XXY"] - 2
dat$hap.auto[dat$SCS == "XYY"] <- dat$haploid[dat$SCS == "XYY"] - 1
# keep these tips only
phy <- keep.tip(tree, dat$species)
# store pruned trees
trees[[i]] <- phy
# make tree unit length
tree.depth <-  max(branching.times(phy))
phy$edge.length <- phy$edge.length / tree.depth
# make a data table to hold the species names, chromosome number and
# sex chromosome system
dat.new <-  as.data.frame(matrix(data=NA, nrow = Ntip(phy), ncol = 3))
colnames(dat.new) <- c("SpeciesName", "chroms", "scs")
# fill in the data table
dat.new$SpeciesName <- dat$species
dat.new$chroms <- dat$hap.auto
dat.new$scs <- dat$SCS
# now we get the qmatrix and pmatrix
inputs <- get.matrixes(haploid.scs = T,
autosome.as.input = T,
Neo.sex = F,
complex = T,
chrom.range.expansion = 0,
dat = dat.new,
trees = phy,
def.rates = list(r01 = 1,  # r1 = 1,    # AA fusion  XO
r02 = 2,  # r2 = 2,    # AA fission XO
r03 = 1,  # r3 = 3,    # AA fusion  XY
r04 = 2,  # r4 = 4,    # AA fission XY
r05 = 1,  # r5 = 5,    # AA fusion  Neo.XY
r06 = 2,  # r6 = 6,    # AA fission Neo.XY
r07 = 1,  # r7 = 7,    # AA fusion  XXY
r08 = 2,  # r8 = 8,    # AA fission XXY
r09 = 1,  # r9 = 9,    # AA fusion  XYY
r10 = 2,  # r10 = 10,  # AA fission XYY
r11 = 3,  # r11 = 11,  # SA fusion  XO -> XY
r12 = 3,  # r12 = 12,  # SA fusion  XY -> Neo.XY
r13 = 3,  # r13 = 13,  # SA fusion  XY -> XXY
r14 = 3,  # r14 = 14,  # SA fusion  XY -> XYY
r15 = 4,  # r15 = 15,  # transision Neo.XY -> XY
r16 = 5,  # r16 = 16,  # X fission  XY -> XXY
r17 = 6,  # r17 = 17,  # Y fission  XY -> XYY
r18 = 7,  # r18 = 18,  # Y loss     XY -> XO
r19 = 8,  # r19 = 19,  # Y loss     XYY -> XY
r20 = 9,  # r20 = 20,  # X fusion   XXY -> XY
r21 = 10,  # r21 = 21,  # Y capture  XO -> XY
r22 = 0,  # r22 = 22,  # polyploidy XO
r23 = 0,  # r23 = 23,  # polyploidy XY
r24 = 0,  # r24 = 24,  # polyploidy Neo.XY
r25 = 0,  # r25 = 25,  # polyploidy XXY
r26 = 0,  # r26 = 26,  # polyploidy XYY
r27 = 0)) # r27 = 27,  # translocation XO -> XXY (White(1973), Animal cytology and evolution)
# get the relavent inputs
qmat <- inputs$qmat
pmat <- inputs$pmat
# trees <- inputs$trees
states <- inputs$states
karyotypes <- inputs$karyotypes
# make a new column to prepare data to make the likelihood function in
# diversitree
dat.new$Karyotype <- paste(dat.new$chroms, dat.new$scs, sep = "")
dat.new$Karyotype.states <- NA
# fill in the states names
for(j in 1:nrow(dat.new)){
dat.new$Karyotype.states[j] <- which(karyotypes %in% dat.new$Karyotype[j])
}
# make a vector which includes states names and species names
MuSSE.states <- dat.new$Karyotype.states
names(MuSSE.states) <- dat.new$SpeciesName
# make the likelihood function
lik <- make.musse(tree = phy,
states = MuSSE.states,
strict = F,
k = length(karyotypes),
control = list(method = "ode"))
# constrain the likelihood function
con.lik <- constrainQmat(qmat = qmat, lik = lik)
# run a temp mcmc to get a value to w
temp <-  diversitree::mcmc(con.lik,
x.init = rep(1,length(argnames(con.lik))),
nsteps = 20,
w = 1,
prior = prior,
upper = 20)
w <- diff(sapply(temp[11:20, 2:(length(argnames(con.lik))+1)], quantile, c(.05, .95)))
# run the mcmc
results[[i]] <- diversitree::mcmc(con.lik,
x.init = rep(1,length(argnames(con.lik))),
nsteps = 100,
w = w,
prior = prior,
upper = 10)
results[[i]][2:(length(argnames(con.lik))+1)] <- results[[i]][2:(length(argnames(con.lik))+1)] / tree.depth
}
class(trees) <- "multiPhylo"
phy$edge.length <- phy$edge.length * tree.depth
# get the post burnin portion
post.burnin <- c()
for(i in 1:100){
x <- results[[i]][51:100,]
post.burnin <- rbind(x, post.burnin)
}
# make the qmatrix
colnames(post.burnin)
qmat[qmat == 1] <- mean(post.burnin$par01)
qmat[qmat == 2] <- mean(post.burnin$par02)
qmat[qmat == 3] <- mean(post.burnin$par03)
qmat[qmat == 5] <- mean(post.burnin$par05)
qmat[qmat == 7] <- mean(post.burnin$par07)
qmat[qmat == 9] <- mean(post.burnin$par09)
qmat[qmat == 10] <- mean(post.burnin$par10)
# rows of the qmatrix should sum to 0
for(i in 1:nrow(qmat)){
qmat[i,i] <- -sum(qmat[i,])
}
# get the simmap
hists <- make.simmap(tree = trees,
x = pmat,
nsim = 100,
pi = "estimated",
Q = qmat)
# plot the simmap
plot(hists, col = setNames(viridis(n = nrow(qmat)), colnames(qmat)))
# get the number of times each transision has occured
counts <- describe.simmap(hists)$count
# get the obspSA value
obspSA <- obspSA(counts = counts,qmat = qmat,states = states)
obspropSA <- obspSA$obspropSA
# now we get the expected pfsa
# make a table to hold the pfsa given scs and chrom number
pfSA.tab <- as.data.frame(matrix(data = NA, nrow = length(karyotypes), ncol = 2))
colnames(pfSA.tab) <- c("state", "pfsa")
for(i in 1:length(karyotypes)){
# for XO / ZO
if(gsub(pattern = "[0-9]",x= karyotypes[i], replacement = "") %in% c("XO", "ZO")){
pfSA.tab$state[i] <- karyotypes[i]
pfSA.tab$pfsa[i] <- Pfsa(Da = as.numeric(gsub(pattern = "[A-z]",
x= karyotypes[i] ,
replacement = "")) * 2,
scs = "XO")
}
# for XY / ZW
if(gsub(pattern = "[0-9]",x= karyotypes[i], replacement = "") %in% c("XY", "ZW")){
pfSA.tab$state[i] <- karyotypes[i]
pfSA.tab$pfsa[i] <- Pfsa(Da = as.numeric(gsub(pattern = "[A-z]",
x= karyotypes[i] ,
replacement = "")) * 2,
scs = "XY")
}
# for Neo.XY / Neo.ZW
if(gsub(pattern = "[0-9]",x= karyotypes[i], replacement = "") %in% c("Neo.XY", "Neo.ZW")){
pfSA.tab$state[i] <- karyotypes[i]
pfSA.tab$pfsa[i] <- Pfsa(Da = as.numeric(gsub(pattern = "[A-z]",
x= karyotypes[i] ,
replacement = "")) * 2,
scs = "XY")
}
# for XXY / ZZW
if(gsub(pattern = "[0-9]",x= karyotypes[i], replacement = "") %in% c("XXY","ZZW")){
pfSA.tab$state[i] <- karyotypes[i]
pfSA.tab$pfsa[i] <- Pfsa(Da = as.numeric(gsub(pattern = "[A-z./]",
x= karyotypes[i] ,
replacement = "")) * 2,
scs = "XXY")
}
# for XYY / ZWW
if(gsub(pattern = "[0-9]",x= karyotypes[i], replacement = "") %in% c("XYY", "ZWW")){
pfSA.tab$state[i] <- karyotypes[i]
pfSA.tab$pfsa[i] <- Pfsa(Da = as.numeric(gsub(pattern = "[A-z./]",
x= karyotypes[i] ,
replacement = "")) * 2,
scs = "XYY")
}
}
# get the expeveted pSA
expSA <- vector(mode = "numeric", length = length(hists))
for(i in 1:length(hists)){
times <- describe.simmap(hists[[i]])$times[2, -(nrow(pfSA.tab)+1)]
expSA[i] <- sum(times * pfSA.tab$pfsa)
}
# lets plot
# clear any previous plots
dev.off()
# get the densities of expected and observed pfsa
den.exp <- density(expSA, bw = 0.009)
den.obs <- density(obspropSA, bw = .009)
# define the limits of the plot region
xlim <- c(min(den.exp$x, den.obs$x), max(den.exp$x, den.obs$x))
ymax <- max(den.exp$y, den.obs$y)
ymin <- 0 - (ymax *.1)
ylim <- c(ymin, ymax)
plot(den.exp,
xlim = xlim,
ylim = ylim,
main = "",
xlab = "Proportion sex-autosome fusion",
cex.axis = 1, cex.lab = 1)
polygon(den.exp,
col = rgb(1, 0, 0, .3))
lines(den.obs)
polygon(den.obs,
col = rgb(0, 0, 1, .3))
# make legend
xpoint <- rep(0.45,2)
points(x = xpoint,
y = c((ymax - ymax * .05), (ymax - ymax * .1)),
pch = 15,
col = c(rgb(1, 0, 0, .5),
rgb(0, 0, 1, .5)),
cex = 1.5)
text(x = xpoint,
y = c((ymax - ymax * .05), (ymax - ymax * .1)),
labels = c("Expected", "Inferred"),
pos = 4,cex = .8)
# get the HPD intervals
HPDobsPsa <- HPDinterval(as.mcmc(obspropSA))
HPDexpPsa <- HPDinterval(as.mcmc(expSA))
# plot the HPD intervals
# expected
segments(x0 = HPDexpPsa[,1],
x1 = HPDexpPsa[,2],
y0 = ymin,
y1 = ymin,
col = rgb(1, 0, 0, .5),
lwd = 3)
# observed
segments(x0 = HPDobsPsa[,1],
x1 = HPDobsPsa[,2],
y0 = ymin/2,
y1 = ymin/2,
col = rgb(0, 0, 1, .5),
lwd = 3)
rowSums(qmat)
sum(qmat(1,))
sum(qmat[1,])
sum(qmat[1,-1])
-sum(qmat[1,-1])
sum(qmat[1,-1]) -sum(qmat[1,-1])
qmat[i,i]
qmat[1,1]
qmat[1,]
# rows of the qmatrix should sum to 0
for(i in 1:nrow(qmat)){
qmat[i,i] <- -sum(qmat[i,])
}
rowSums(qmat)
qmat
qmat[i,i]
# get the relavent inputs
qmat <- inputs$qmat
colnames(post.burnin)
qmat[qmat == 1] <- mean(post.burnin$par01)
qmat[qmat == 2] <- mean(post.burnin$par02)
qmat[qmat == 3] <- mean(post.burnin$par03)
qmat[qmat == 5] <- mean(post.burnin$par05)
qmat[qmat == 7] <- mean(post.burnin$par07)
qmat[qmat == 9] <- mean(post.burnin$par09)
qmat[qmat == 10] <- mean(post.burnin$par10)
sum(qmat[i,])
sum(qmat[1,])
# rows of the qmatrix should sum to 0
for(i in 1:nrow(qmat)){
qmat[i,i] <- -(sum(qmat[i,]))
}
qmat
rowSums(qmat)
# plot the simmap
plot(hists, col = setNames(viridis(n = nrow(qmat)), colnames(qmat)))
make.simmap(tree = trees,
x = pmat,
nsim = 100,
pi = "estimated",
Q = qmat)
# load libraries
library(phytools)
make.simmap(tree = trees,
x = pmat,
nsim = 100,
pi = "estimated",
Q = qmat)
rowsim
rowsum(qmat)
sum(qmat[1,])
# get the relavent inputs
qmat <- inputs$qmat
qmat
qmat[qmat == 1] <- mean(post.burnin$par01)
qmat[qmat == 2] <- mean(post.burnin$par02)
qmat[qmat == 3] <- mean(post.burnin$par03)
qmat[qmat == 5] <- mean(post.burnin$par05)
qmat[qmat == 7] <- mean(post.burnin$par07)
qmat[qmat == 9] <- mean(post.burnin$par09)
qmat[qmat == 10] <- mean(post.burnin$par10)
qmat
mean(post.burnin$par01)
mean(post.burnin$par02)
mean(post.burnin$par03)
mean(post.burnin$par05)
mean(post.burnin$par07)
mean(post.burnin$par09)
mean(post.burnin$par10)
qmat[qmat == 0]
sum(qmat[1,])
sum(qmat[1,]) - 0.1008838
# get the relavent inputs
qmat <- inputs$qmat
qmat[qmat == 1] <- round(mean(post.burnin$par01),5)
qmat[qmat == 2] <- round(mean(post.burnin$par02),5)
qmat[qmat == 3] <- round(mean(post.burnin$par03),5)
qmat[qmat == 5] <- round(mean(post.burnin$par05),5)
qmat[qmat == 7] <- round(mean(post.burnin$par07),5)
qmat[qmat == 9] <- round(mean(post.burnin$par09),5)
qmat[qmat == 10] <- round(mean(post.burnin$par10),5)
-(sum(qmat[i,]))
qmat[1,]
sum(qmat[1,])
sum(qmat[1,]) - 0.10088
# rows of the qmatrix should sum to 0
for(i in 1:nrow(qmat)){
qmat[i,i] <- -(sum(qmat[i,]))
}
rowSums(qmat)
qmat
make.simmap(tree = trees,
x = pmat,
nsim = 100,
pi = "estimated",
Q = qmat)
make.simmap(tree = trees,
x = pmat,
nsim = 1,
pi = "estimated",
Q = qmat)
make.simmap
phytools:::mcmcQ
phytools::mcmcQ
rowSums(qmat)
make.simmap(tree = trees,
x = pmat,
nsim = 100,
pi = "estimated",
Q = qmat,
tol = 1e-10)
# get the relavent inputs
qmat <- inputs$qmat
qmat[qmat == 1] <- mean(post.burnin$par01)
qmat[qmat == 2] <- mean(post.burnin$par02)
qmat[qmat == 3] <- mean(post.burnin$par03)
qmat[qmat == 5] <- mean(post.burnin$par05)
qmat[qmat == 7] <- mean(post.burnin$par07)
qmat[qmat == 9] <- mean(post.burnin$par09)
qmat[qmat == 10] <- mean(post.burnin$par10)
# rows of the qmatrix should sum to 0
for(i in 1:nrow(qmat)){
qmat[i,i] <- -(sum(qmat[i,]))
}
make.simmap(tree = trees,
x = pmat,
nsim = 100,
pi = "estimated",
Q = qmat,
tol = 1e-10)
make.simmap
make.simmap(tree = trees,
x = pmat,
nsim = 100,
pi = "estimated",
Q = qmat)
make.simmap(tree = trees,
x = pmat,
nsim = 1,
pi = "estimated",
Q = qmat)
# get the simmap
hists <- make.simmap(tree = trees,
x = pmat,
nsim = 1,
pi = "estimated",
Q = qmat)
make.simmap(tree = trees,
x = pmat,
nsim = 1,
pi = "equal",
Q = qmat)
View(constrainQmat)
