install.packages("phytools")
x <- paste("sp", (sample(1:100, 20, replace = F)))
x <- paste("sp",
(sample(1:100, 20, replace = F)),
sep = "_")
x
y <- paste("sp",
(sample(1:100, 20, replace = F)),
sep = "_")
x
y
x %in% y
x[14]
x %in% y
y
x[x %in% y]
x.dat <- sample(20:40, 20)
y.dat <- sample(20:40, 20)
dat.1 <- c(x,x.dat)
dat.1 <- cbind(x,x.dat)
dat.1
dat.1 <- as.data.frame(cbind(x,x.dat))
dat.2 <- as.data.frame(cbind(y,y.dat))
colnames(dat.1) <- c("species", "chroms")
colnames(dat.2) <- c("species", "chroms")
dat.1$species
dat.2$species
dat.1$species %in% dat.2$species
dat.1[(dat.1$species %in% dat.2$species),]
dat.2[(dat.2$species %in% dat.1$species),]
new.dat.1 <- dat.1[(dat.1$species %in% dat.2$species),]
new.dat.2 <- dat.2[(dat.2$species %in% dat.1$species),]
which(dat.1$species,dat.2$species)
which(dat.1$species %in% dat.2$species)
# when you are combining the two datasets it would be easier to
# sort the species names of both datasets to alphabetical order
# so that both datasets have the same order
sort(new.dat.1$species)
# when you are combining the two datasets it would be easier to
# sort the species names of both datasets to alphabetical order
# so that both datasets have the same order
order(new.dat.1$species)
order(new.dat.2$species)
new.dat.2$species
### combining the two datasets.
# there are many ways you can combine given datasets. let me show you couple of ways
## useing cbind
# when you are combining the two datasets it would be easier to
# sort the species names of both datasets to alphabetical order
# so that both datasets have the same order
ordered.new.dat.1 <- new.dat.1[order(new.dat.1$species),]
ordered.new.dat.2 <- new.dat.2[order(new.dat.2$species),]
ordered.new.dat.1
ordered.new.dat.2
# now you can see that the order of the two dataset are the same
# now use cbind
ordered.new.dat.1 <- cbind(ordered.new.dat.1, ordered.new.dat.2$chroms)
ordered.new.dat.1
# now you can see that the order of the two dataset are the same
# now use cbind
final.dat <- cbind(ordered.new.dat.1, ordered.new.dat.2$chroms)
# make a dummy dataset this will represent the species names
x <- paste("sp",
(sample(1:100, 20, replace = F)),
sep = "_")
# make a dummy data set wich represent the trait (e.g. chromosome number)
x.dat <- sample(20:40, 20)
# two objects that we just created are vectors. "x" is a character verctor and
# "x.dat" is a numeric vector. now we combine these two vectors to make
# a dataset that would represent our trait data set.
dat.1 <- as.data.frame(cbind(x,x.dat))
# lets rename the column names so that they are somewhat similar to
# column nanes that are in our actual datasets
colnames(dat.1) <- c("species", "chroms")
# lets to that same process to make a second dataset
y <- paste("sp",
(sample(1:100, 20, replace = F)),
sep = "_")
y.dat <- sample(c(1,0),
20,
replace = T)
dat.2 <- as.data.frame(cbind(y,y.dat))
colnames(dat.2) <- c("species", "Binary.Trait")
# now we compare two datasets to find what species are present in
# both
new.dat.1 <- dat.1[(dat.1$species %in% dat.2$species),]
new.dat.2 <- dat.2[(dat.2$species %in% dat.1$species),]
### combining the two datasets.
# there are many ways you can combine given datasets. let me show you couple of ways
## useing cbind
# when you are combining the two datasets it would be easier to
# sort the species names of both datasets to alphabetical order
# so that both datasets have the same order
ordered.new.dat.1 <- new.dat.1[order(new.dat.1$species),]
ordered.new.dat.2 <- new.dat.2[order(new.dat.2$species),]
# now you can see that the order of the two dataset are the same
# now use cbind
final.dat <- cbind(ordered.new.dat.1, ordered.new.dat.2$Binary.Trait)
# and then change the columname of the bound column
colnames(final.dat)[3] <- "Binary.Trait"
final.dat
## using a loop
# here we make an epty column first and then we just fill it
new.dat.1$Binary.Trait <- NA
for(i in 1:nrow(new.dat.1)){
new.dat.1$Binary.Trait[i] <- new.dat.2$Binary.Trait[new.dat.2$species == new.dat.1$species[i]]]
}
new.dat.1$Binary.Trait[i
]
nrow(new.dat.1)
new.dat.2$Binary.Trait
new.dat.2$species
new.dat.1$species
## using a loop
# here we make an epty column first and then we just fill it
new.dat.1$Binary.Trait <- NA
for(i in 1:nrow(new.dat.1)){
new.dat.1$Binary.Trait[i] <- new.dat.2$Binary.Trait[new.dat.2$species == new.dat.1$species[i]]
}
new.dat.1
rainbow(4)[4]
setwd("~/GitHub/pfsa/dummy.scripts/analysis/figures")
# Terrence Sylvester
# 27 October 2020
# pradakshanas@gmail.com
# load libraries
library(coda)
# load results
load("../results/pfsa-orthoptera.RData")
# get the densities of expected and observed pfsa
den.exp <- density(expSA, bw = 0.009)
den.obs <- density(obspropSA, bw = .009)
# define the limits of the plot region
xlim <- c(min(den.exp$x, den.obs$x), max(den.exp$x, den.obs$x))
ymax <- max(den.exp$y, den.obs$y)
ymin <- 0 - (ymax *.1)
ylim <- c(ymin, ymax)
plot(den.exp,
xlim = xlim,
ylim = ylim,
main = "",
xlab = "Proportion sex-autosome fusion",
cex.axis = 1, cex.lab = 1)
polygon(den.exp,
col = rgb(1, 0, 0, .3))
lines(den.obs)
polygon(den.obs,
col = rgb(0, 0, 1, .3))
# make legend
xpoint <- rep(0.45,2)
points(x = xpoint,
y = c((ymax - ymax * .05), (ymax - ymax * .1)),
pch = 15,
col = c(rgb(1, 0, 0, .5),
rgb(0, 0, 1, .5)),
cex = 1.5)
text(x = xpoint,
y = c((ymax - ymax * .05), (ymax - ymax * .1)),
labels = c("Expected", "Inferred"),
pos = 4,cex = .8)
# get the HPD intervals
HPDobsPsa <- HPDinterval(as.mcmc(obspropSA))
HPDexpPsa <- HPDinterval(as.mcmc(expSA))
# plot the HPD intervals
# expected
segments(x0 = HPDexpPsa[,1],
x1 = HPDexpPsa[,2],
y0 = ymin,
y1 = ymin,
col = rgb(1, 0, 0, .5),
lwd = 3)
# observed
segments(x0 = HPDobsPsa[,1],
x1 = HPDobsPsa[,2],
y0 = ymin/2,
y1 = ymin/2,
col = rgb(0, 0, 1, .5),
lwd = 3)
